# handlers/admin.py
from __future__ import annotations

import math

import logging

from aiogram import Dispatcher, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from config import ADMIN_ID
from utils.helpers import parse_local_datetime, format_local_datetime

from database import (
    get_appointments,
    get_appointment_by_id,
    add_appointment,
    update_appointment,
    update_appointment_status,
    update_appointment_event_id,
    delete_appointment,
)

from services.calendar import (
    add_event_to_calendar,
    update_event_in_calendar,
    delete_event_from_calendar,
    add_appointment_to_sheet,
    update_appointment_in_sheet,
    delete_appointment_from_sheet,
)

from keyboards import (
    admin_menu,                   # —Å–∞–º ReplyKeyboardMarkup
    ADMIN_MENU_LIST_LABEL,        # "üìã –°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π"
    ADMIN_MENU_DELETE_LABEL,      # "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å"
    ADMIN_MENU_EDIT_LABEL,        # "‚úè –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å"
)

log = logging.getLogger(__name__)


# ---- FSM ----
class DeleteAppointment(StatesGroup):
    waiting_for_id = State()

class EditAppointment(StatesGroup):
    waiting_for_id = State()
    waiting_for_new_date = State()


# ---- –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å ----
async def admin_panel(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!")
        return
    await message.answer("üîπ –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=admin_menu)


# ---- –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π ----
async def show_appointments(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!")
        return

    appts = await get_appointments()
    if not appts:
        await message.answer("üìã –ó–∞–ø–∏—Å–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    lines = []
    for a in appts:
        svc_name = a.service.name if getattr(a, "service", None) else "–£—Å–ª—É–≥–∞"
        lines.append(
            f"üÜî {a.id} | üë§ {a.name or '-'} | üíá {svc_name} | üìÖ {format_local_datetime(a.date)}"
        )
    await message.answer("üìã <b>–°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π:</b>\n" + "\n".join(lines))


# ---- –£–¥–∞–ª–µ–Ω–∏–µ ----
async def delete_via_callback(call: CallbackQuery):
    if call.from_user.id != ADMIN_ID:
        return await call.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
    try:
        appt_id = int(call.data.split("_", 1)[1])
    except Exception:
        return await call.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID", show_alert=True)

    appt = await get_appointment_by_id(appt_id)
    if not appt:
        return await call.answer("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)

    svc_name = appt.service.name if getattr(appt, "service", None) else "–£—Å–ª—É–≥–∞"

    await delete_appointment_from_sheet(appt.name or "", svc_name, appt.date)
    if appt.event_id:
        await delete_event_from_calendar(appt.event_id)
    await delete_appointment(appt_id)

    await call.message.edit_text(f"‚ùå –ó–∞–ø–∏—Å—å ID {appt_id} —É–¥–∞–ª–µ–Ω–∞.")
    await call.bot.send_message(appt.user_id, "‚ùå –í–∞—à–∞ –∑–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞.")


async def delete_appointment_handler(message: Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!")
        return
    await message.answer("–í–≤–µ–¥–∏—Ç–µ <b>ID</b> –∑–∞–ø–∏—Å–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:")
    await state.set_state(DeleteAppointment.waiting_for_id)

async def process_delete(message: Message, state: FSMContext):
    text = (message.text or "").strip()
    try:
        appt_id = int(text)
    except ValueError:
        await message.answer("‚ùå –û—à–∏–±–∫–∞! ID –∑–∞–ø–∏—Å–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        await state.clear()
        return

    appt = await get_appointment_by_id(appt_id)
    if not appt:
        await message.answer("‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        await state.clear()
        return
    
    svc_name = appt.service.name if getattr(appt, "service", None) else "–£—Å–ª—É–≥–∞"

    # Google —Å–Ω–∞—á–∞–ª–∞ (Sheets + Calendar), –∑–∞—Ç–µ–º –ë–î
    deleted_from_sheets = await delete_appointment_from_sheet(appt.name or "", svc_name, appt.date)
    if appt.event_id:
        await delete_event_from_calendar(appt.event_id)

    ok = await delete_appointment(appt_id)
    if not ok:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!")
        return

    await message.answer(
        f"‚úÖ –ó–∞–ø–∏—Å—å <b>ID {appt_id}</b> —É–¥–∞–ª–µ–Ω–∞.\n"
        f"{'üìÑ –£–¥–∞–ª–µ–Ω–∞ –∏–∑ Google Sheets' if deleted_from_sheets else '‚ö†Ô∏è –í Google Sheets –∑–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}"
    )
    await state.clear()


# ---- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ----
async def edit_appointment_handler(message: Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!")
        return
    await message.answer("–í–≤–µ–¥–∏—Ç–µ <b>ID</b> –∑–∞–ø–∏—Å–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:")
    await state.set_state(EditAppointment.waiting_for_id)

async def process_edit(message: Message, state: FSMContext):
    appt_id_txt = (message.text or "").strip()
    try:
        appt_id = int(appt_id_txt)
    except ValueError:
        await message.answer("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        await state.clear()
        return

    appt = await get_appointment_by_id(appt_id)
    if not appt:
        await message.answer("‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        await state.clear()
        return

    await state.update_data(appointment_id=appt_id)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú</b>:")
    await state.set_state(EditAppointment.waiting_for_new_date)

async def process_new_date(message: Message, state: FSMContext):
    data = await state.get_data()
    appt_id: int | None = data.get("appointment_id")

    if not appt_id:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ID –∑–∞–ø–∏—Å–∏!")
        return

    appt = await get_appointment_by_id(appt_id)
    if not appt:
        await message.answer("‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        await state.clear()
        return

    try:
        new_dt = parse_local_datetime((message.text or "").strip())
    except Exception:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <b>–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú</b>.")
        return

    ok = await update_appointment(appt_id, new_dt)
    if not ok:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!")
        return
    
    svc_name = appt.service.name if getattr(appt, "service", None) else "–£—Å–ª—É–≥–∞"

    if appt.event_id:
        duration_h = max(1, math.ceil((appt.duration_min or 60) / 60))
        await update_event_in_calendar(appt.event_id, appt.name or "–ö–ª–∏–µ–Ω—Ç", svc_name, new_dt, duration_hours=duration_h)

    await update_appointment_in_sheet(appt.name or "", svc_name, appt.date, new_dt)

    await message.answer(f"‚úÖ –ó–∞–ø–∏—Å—å <b>ID {appt_id}</b> –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –Ω–∞ {format_local_datetime(new_dt)}.")
    await state.clear()



# ---- –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ ----
async def confirm_appointment(call: CallbackQuery):
    appt_id_txt = call.data.split("_", 1)[1]
    try:
        appt_id = int(appt_id_txt)
    except ValueError:
        await call.message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID.")
        return

    appt = await get_appointment_by_id(appt_id)
    if not appt:
        await call.message.answer("‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    ok = await update_appointment_status(appt_id, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ")
    if not ok:
        await call.message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å.")
        return

    svc_name = appt.service.name if getattr(appt, "service", None) else "–£—Å–ª—É–≥–∞"

    if not appt.event_id:
        duration_h = max(1, math.ceil((appt.duration_min or 60) / 60))
        event_id = await add_event_to_calendar(appt.name or "–ö–ª–∏–µ–Ω—Ç", svc_name, appt.date, duration_hours=duration_h)
        if event_id:
            await update_appointment_event_id(appt_id, event_id)
            appt.event_id = event_id

    await call.bot.send_message(
        appt.user_id,
        f"‚úÖ –í–∞—à–∞ –∑–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\nüìÖ {format_local_datetime(appt.date)}"
    )

    await call.message.edit_text(
        f"‚úÖ –ó–∞–ø–∏—Å—å ID {appt_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.\n"
        f"üìÖ {format_local_datetime(appt.date)}\n"
        f"üìå Calendar ID: {appt.event_id or '‚Äî'}"
    )



# ---- –û—Ç–º–µ–Ω–∞ ----
async def cancel_appointment(call: CallbackQuery):
    appt_id_txt = call.data.split("_", 1)[1]
    try:
        appt_id = int(appt_id_txt)
    except ValueError:
        await call.message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID.")
        return

    appt = await get_appointment_by_id(appt_id)
    if not appt:
        await call.message.answer("‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    svc_name = appt.service.name if getattr(appt, "service", None) else "–£—Å–ª—É–≥–∞"

    await delete_appointment_from_sheet(appt.name or "", svc_name, appt.date)
    if appt.event_id:
        await delete_event_from_calendar(appt.event_id)

    ok = await delete_appointment(appt_id)
    if not ok:
        await call.message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å –∏–∑ –ë–î.")
        return

    await call.bot.send_message(
        appt.user_id,
        f"‚ùå –í–∞—à–∞ –∑–∞–ø–∏—Å—å –Ω–∞ {svc_name} ({format_local_datetime(appt.date)}) –æ—Ç–º–µ–Ω–µ–Ω–∞."
    )
    await call.message.edit_text("‚ùå –ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞ –∏ –æ—Ç–º–µ–Ω–µ–Ω–∞ –≤–µ–∑–¥–µ.")



# ---- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ----
def register_admin_handlers(dp: Dispatcher):
    # –°–ù–ê–ß–ê–õ–ê ‚Äî –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ STATE!
    dp.message.register(process_delete, DeleteAppointment.waiting_for_id)
    dp.message.register(process_edit,   EditAppointment.waiting_for_id)
    dp.message.register(process_new_date, EditAppointment.waiting_for_new_date)

    # –ü–æ—Ç–æ–º ‚Äî –æ–±—ã—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã/–∫–Ω–æ–ø–∫–∏
    dp.message.register(admin_panel, Command("admin"))

    # —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ç–µ–∫—Å—Ç—É –±–µ–∑ —ç–º–æ–¥–∑–∏ (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —ç–º–æ–¥–∑–∏ –∏–∑–º–µ–Ω—è—Ç—Å—è)
    dp.message.register(
        show_appointments,
        F.text.contains(ADMIN_MENU_LIST_LABEL.replace("üìã ", ""))
    )
    dp.message.register(
        delete_appointment_handler,
        F.text.contains(ADMIN_MENU_DELETE_LABEL.replace("üóëÔ∏è ", ""))
    )
    dp.message.register(
        edit_appointment_handler,
        F.text.contains(ADMIN_MENU_EDIT_LABEL.replace("‚úè ", ""))
    )

    # –∫–æ–ª–±—ç–∫–∏
    dp.callback_query.register(confirm_appointment, F.data.startswith("confirm_"))
    dp.callback_query.register(cancel_appointment,  F.data.startswith("cancel_"))
    dp.callback_query.register(delete_via_callback, F.data.startswith("delete_"))
