# handlers/client.py (async –≤–µ—Ä—Å–∏—è)
from __future__ import annotations
from aiogram import Dispatcher
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.fsm.state import State, StatesGroup

from config import ADMIN_ID
from utils.helpers import parse_local_datetime, format_local_datetime

# –ë–î
from sqlalchemy import select
from database import (
    Appointment,
    add_appointment,                    # –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–¥–µ—Å—å –Ω–∞–ø—Ä—è–º—É—é, –Ω–æ –ø—É—Å—Ç—å –±—É–¥–µ—Ç
    get_appointments,
    get_appointment_by_id,
)

# –°–µ—Ä–≤–∏—Å—ã (–µ–¥–∏–Ω–∞—è —Ç–æ—á–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏)
from services.appointments import (
    create_appointment_and_sync,        # –ë–î + Google Calendar + Google Sheets
)

from keyboards import confirmation_keyboard, client_menu


class AppointmentForm(StatesGroup):
    name = State()
    service = State()
    date = State()


async def start_menu(message: Message):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –º–µ–Ω—é –∫–ª–∏–µ–Ω—Ç–∞."""
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
        reply_markup=client_menu,
    )


async def start_appointment(message: Message, state: FSMContext):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–∏—Å–∏, –∑–∞–ø—Ä–∞—à–∏–≤–∞—è –∏–º—è."""
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(AppointmentForm.name)


async def process_name(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–º—è –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É—Å–ª—É–≥—É."""
    await state.update_data(name=message.text.strip())
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:\n1Ô∏è‚É£ –°—Ç—Ä–∏–∂–∫–∞\n2Ô∏è‚É£ –£–∫–ª–∞–¥–∫–∞\n3Ô∏è‚É£ –û–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ")
    await state.set_state(AppointmentForm.service)


async def process_service(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —É—Å–ª—É–≥—É –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–∞—Ç—É."""
    await state.update_data(service=message.text.strip())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú:")
    await state.set_state(AppointmentForm.date)


async def process_date(message: Message, state: FSMContext):
    """–°–æ–∑–¥–∞—ë—Ç –∑–∞–ø–∏—Å—å: –ë–î ‚Üí Calendar ‚Üí Sheets, –∏ —à–ª—ë—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É."""
    SERVICE_NAMES = {"1": "–°—Ç—Ä–∏–∂–∫–∞ ‚úÇÔ∏è", "2": "–£–∫–ª–∞–¥–∫–∞ üíá‚Äç‚ôÄÔ∏è", "3": "–û–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ üé®"}

    user_id = message.from_user.id
    user_data = await state.get_data()
    name_raw = (user_data.get("name") or "").strip()
    service_raw = (user_data.get("service") or "").strip()
    date_raw = (message.text or "").strip()

    service_name = SERVICE_NAMES.get(service_raw, service_raw or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —É—Å–ª—É–≥–∞ ‚ùì")

    # –ü–∞—Ä—Å–∏–º –ª–æ–∫–∞–ª—å–Ω—É—é –¥–∞—Ç—É ¬´–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú¬ª ‚Üí aware datetime (Asia/Tashkent)
    try:
        appt_dt = parse_local_datetime(date_raw)
    except Exception:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú")
        return

    # –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º (–ë–î + Calendar + Sheets)
    appt_id = await create_appointment_and_sync(
        user_id=user_id,
        name=name_raw,
        service=service_name,
        date=appt_dt,
    )

    # –®–ª—ë–º –∞–¥–º–∏–Ω—É –∫–∞—Ä—Ç–æ—á–∫—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ confirm/cancel
    await message.bot.send_message(
        ADMIN_ID,
        (
            "üìÖ <b>–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å</b>\n"
            f"üÜî {appt_id}\n"
            f"üë§ {name_raw}\n"
            f"üíá {service_name}\n"
            f"üìç Telegram: <code>{user_id}</code>\n"
            f"üìÖ {format_local_datetime(appt_dt)}"
        ),
        reply_markup=confirmation_keyboard(appt_id),
    )

    # –û—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É
    await message.answer(
        "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–∞—Å—Ç–µ—Ä—É.\n"
        f"üíá –í—ã –≤—ã–±—Ä–∞–ª–∏: {service_name}\n"
        f"üìÖ –î–∞—Ç–∞: {format_local_datetime(appt_dt)}",
        reply_markup=client_menu,
    )
    await state.clear()


async def my_appointments(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç—É –µ–≥–æ –∑–∞–ø–∏—Å–∏ (–∏–∑ –ë–î)."""
    user_id = message.from_user.id
    appts = [a for a in await get_appointments() if a.user_id == user_id]

    if not appts:
        await message.answer("üìÖ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.")
        return

    lines = [
        f"üìå {a.name} ‚Äî {a.service} ‚Äî {format_local_datetime(a.date)}"
        for a in appts
    ]
    await message.answer("üìã –í–∞—à–∏ –∑–∞–ø–∏—Å–∏:\n" + "\n".join(lines))


def register_client_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤."""
    dp.message.register(start_menu, Command("start"))
    dp.message.register(start_appointment, lambda m: m.text == "‚úÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è üìù")
    dp.message.register(my_appointments,  lambda m: m.text == "‚úÖ –ú–æ–∏ –∑–∞–ø–∏—Å–∏ üìÖ")
    dp.message.register(process_name,     AppointmentForm.name)
    dp.message.register(process_service,  AppointmentForm.service)
    dp.message.register(process_date,     AppointmentForm.date)
