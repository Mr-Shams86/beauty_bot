# handlers/client.py
from __future__ import annotations

import logging
import datetime as dt
from aiogram import Dispatcher, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, ReplyKeyboardRemove

from config import ADMIN_ID
from utils.helpers import parse_local_datetime, format_local_datetime, TZ

# DB helpers
from database import (
    list_services,
    get_service_by_id,
    get_service_by_name,
    get_future_appointments_by_user,
    upsert_user,
    has_time_conflict,
)

# –°–µ—Ä–≤–∏—Å—ã (–µ–¥–∏–Ω–∞—è —Ç–æ—á–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏)
from services.appointments import create_appointment_and_sync

from keyboards import confirmation_keyboard, client_menu

log = logging.getLogger(__name__)


class AppointmentForm(StatesGroup):
    name = State()
    service = State()   # —Ç—É—Ç —Ö—Ä–∞–Ω–∏–º service_id
    date = State()


async def start_menu(message: Message):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –º–µ–Ω—é –∫–ª–∏–µ–Ω—Ç–∞."""
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
        reply_markup=client_menu,
    )


async def start_appointment(message: Message, state: FSMContext):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–∏—Å–∏, –∑–∞–ø—Ä–∞—à–∏–≤–∞—è –∏–º—è."""
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(AppointmentForm.name)


async def process_name(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–º—è –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —É—Å–ª—É–≥–∏ –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞."""
    await state.update_data(name=(message.text or "").strip())

    services = await list_services()
    if not services:
        await message.answer("‚ö†Ô∏è –°–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ –ø–æ–∫–∞ –ø—É—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    lines = [f"{i+1}) {s.name} ‚Äî {s.duration_min} –º–∏–Ω."
             for i, s in enumerate(services)]
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É, –æ—Ç–ø—Ä–∞–≤–∏–≤ –Ω–æ–º–µ—Ä –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ:\n\n" + "\n".join(lines)
    )
    await state.set_state(AppointmentForm.service)


async def process_service(message: Message, state: FSMContext):
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–æ–º–µ—Ä/–Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç service_id."""
    raw = (message.text or "").strip()

    svc = None
    if raw.isdigit():
        idx = int(raw) - 1
        all_svcs = await list_services()
        if 0 <= idx < len(all_svcs):
            svc = all_svcs[idx]
    if not svc:
        svc = await get_service_by_name(raw, partial=True)
    if not svc:
        services = await list_services()
        lines = [f"{i+1}) {s.name} ‚Äî {s.duration_min} –º–∏–Ω."
                 for i, s in enumerate(services)]
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —É—Å–ª—É–≥—É.\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:\n\n" + "\n".join(lines)
        )
        return

    if not svc:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —É—Å–ª—É–≥—É. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")
        return

    await state.update_data(service_id=svc.id)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú</b>:", parse_mode="HTML")
    await state.set_state(AppointmentForm.date)


async def process_date(message: Message, state: FSMContext):
    """–°–æ–∑–¥–∞—ë—Ç –∑–∞–ø–∏—Å—å: –ë–î ‚Üí Calendar ‚Üí Sheets, –∏ —à–ª—ë—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É."""
    user_id = message.from_user.id
    data = await state.get_data()

    user_name = (data.get("name") or "").strip()
    service_id = data.get("service_id")
    date_raw = (message.text or "").strip()

    if not service_id:
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É.")
        await state.set_state(AppointmentForm.service)
        return

    # # 1) –ü–∞—Ä—Å–∏–Ω–≥ –∏ ¬´–Ω–µ –ø—Ä–æ—à–ª–æ–µ¬ª./ –ü–∞—Ä—Å–∏–º –ª–æ–∫–∞–ª—å–Ω—É—é –¥–∞—Ç—É ¬´–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú¬ª ‚Üí aware datetime (Asia/Tashkent)
    try:
        appt_dt = parse_local_datetime(date_raw) # -> aware (Asia/Tashkent)
    except Exception:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <b>–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú</b>.", parse_mode="HTML")
        return

    if appt_dt < dt.datetime.now(tz=TZ):
        await message.answer("‚ùå –ù–µ–ª—å–∑—è –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ—à–µ–¥—à—É—é –¥–∞—Ç—É.")
        return

    # 2) –ü–æ–¥—Ç—è–Ω—É—Ç—å —É—Å–ª—É–≥—É –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    svc = await get_service_by_id(service_id)
    if not svc:
        await message.answer("‚ùå –£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.set_state(AppointmentForm.service)
        return
    service_name = svc.name
    duration_min = svc.duration_min or 60  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 60 –º–∏–Ω—É—Ç
    
    # 3) –ö–æ–Ω—Ñ–ª–∏–∫—Ç—ã
    if await has_time_conflict(appt_dt, duration_min):
        await message.answer("‚ùå –í—Ä–µ–º—è –∑–∞–Ω—è—Ç–æ. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ.")
        return
    
    # (–æ–ø—Ü.) –æ–±–Ω–æ–≤–∏–º/—Å–æ–∑–¥–∞–¥–∏–º –∑–∞–ø–∏—Å—å –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    fallback_name = (message.from_user.full_name or message.from_user.username or "").strip() or f"user_{user_id}"
    try:
        await upsert_user(telegram_id=user_id, name=user_name or fallback_name)
    except Exception as e:
        log.warning("upsert_user failed: %s", e)


    # 4) –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º (–ë–î + Calendar + Sheets)
    try:
        appt_id = await create_appointment_and_sync(
            user_id=user_id,
            user_name=user_name,
            service_id=service_id,
            date=appt_dt,
        )
    except ValueError as e:
        await message.answer(f"‚ùå {e}")
        return

    # 5) –®–ª—ë–º –∞–¥–º–∏–Ω—É –∫–∞—Ä—Ç–æ—á–∫—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ confirm/cancel
    await message.bot.send_message(
        ADMIN_ID,
        (
            "üìÖ <b>–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å</b>\n"
            f"üÜî {appt_id}\n"
            f"üë§ {user_name}\n"
            f"üíá {service_name}\n"
            f"üìç Telegram: <code>{user_id}</code>\n"
            f"üìÖ {format_local_datetime(appt_dt)}"
        ),
        reply_markup=confirmation_keyboard(appt_id),
        parse_mode="HTML",
    )

    # –û—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É
    await message.answer(
        "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–∞—Å—Ç–µ—Ä—É.\n"
        f"üíá –£—Å–ª—É–≥–∞: {service_name}\n"
        f"üïí –ö–æ–≥–¥–∞: {format_local_datetime(appt_dt)}",
        reply_markup=client_menu,
    )
    await state.clear()


async def my_appointments(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç—É –µ–≥–æ –±—É–¥—É—â–∏–µ –∑–∞–ø–∏—Å–∏ (–∏–∑ –ë–î)."""
    user_id = message.from_user.id
    appts = await get_future_appointments_by_user(user_id)

    if not appts:
        await message.answer("üìÖ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –±—É–¥—É—â–∏—Ö –∑–∞–ø–∏—Å–µ–π.")
        return

    lines = []
    for a in appts:
        svc_name = a.service.name if getattr(a, "service", None) else "–£—Å–ª—É–≥–∞"
        lines.append(f"‚Ä¢ {svc_name} ‚Äî {format_local_datetime(a.date)} ‚Äî {a.status}")

    await message.answer("üìã <b>–í–∞—à–∏ –∑–∞–ø–∏—Å–∏</b>:\n" + "\n".join(lines), parse_mode="HTML")


def register_client_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤."""
    dp.message.register(start_menu, Command("start"))
    dp.message.register(my_appointments, Command("my"))
    
    dp.message.register(start_appointment, F.text == "‚úÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è üìù")
    dp.message.register(my_appointments,  F.text == "‚úÖ –ú–æ–∏ –∑–∞–ø–∏—Å–∏ üìÖ")

    dp.message.register(process_name,    AppointmentForm.name)
    dp.message.register(process_service, AppointmentForm.service)
    dp.message.register(process_date,    AppointmentForm.date)
