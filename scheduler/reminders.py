# scheduler/reminders.py
from __future__ import annotations

import datetime as dt
from typing import Dict, Tuple

from apscheduler.schedulers.asyncio import AsyncIOScheduler
from loguru import logger

from utils.helpers import TZ, format_local_datetime
from database import get_appointments, AppointmentStatus


# –ü—Ä–æ—Å—Ç–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫ –≤ —Ç–µ—á–µ–Ω–∏–µ –æ–¥–Ω–æ–π –∏ —Ç–æ–π –∂–µ –º–∏–Ω—É—Ç—ã
# –∫–ª—é—á: (appointment_id, "24h"/"2h", minute_dt)
_recent: Dict[Tuple[int, str, dt.datetime], float] = {}

WINDOW_SEC = 75  # —Å–∫–æ–ª—å–∫–æ –¥–µ—Ä–∂–∏–º –º–µ—Ç–∫—É ¬´—É–∂–µ —Å–ª–∞–ª–∏¬ª (—Å–µ–∫)

def _floor_minute(d: dt.datetime) -> dt.datetime:
    return d.astimezone(TZ).replace(second=0, microsecond=0)

def _same_minute(a: dt.datetime, b: dt.datetime) -> bool:
    return _floor_minute(a) == _floor_minute(b)

def _prune_recent(now_ts: float) -> None:
    # —á–∏—Å—Ç–∏–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –º–µ—Ç–∫–∏
    to_del = [k for k, exp in _recent.items() if exp <= now_ts]
    for k in to_del:
        _recent.pop(k, None)


async def _tick(bot):
    now = dt.datetime.now(TZ)
    # —Ü–µ–ª–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã: —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞ –∏ —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞
    targets = [
        (now + dt.timedelta(hours=24), "24h", "–∑–∞ 24 —á–∞—Å–∞"),
        (now + dt.timedelta(hours=2),  "2h",  "–∑–∞ 2 —á–∞—Å–∞"),
    ]

    # —á–∏—Å—Ç–∏–º –∫—ç—à –¥—É–±–ª–µ–π
    _prune_recent(now.timestamp())

    appts = await get_appointments()  # ORM-–æ–±—ä–µ–∫—Ç—ã
    for a in appts:
        # –Ω–∞–ø–æ–º–∏–Ω–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã–º –∑–∞–ø–∏—Å—è–º
        if getattr(a, "status", None) != AppointmentStatus.CONFIRMED:
            continue

        # —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –¥–∞—Ç–∞ aware
        if a.date.tzinfo is None:
            logger.warning("Appointment %s has naive datetime, skipping", a.id)
            continue

        svc_name = getattr(getattr(a, "service", None), "name", None) or "–£—Å–ª—É–≥–∞"
        when_str = format_local_datetime(a.date)

        for target_dt, label, human in targets:
            if _same_minute(a.date, target_dt):
                key = (a.id, label, _floor_minute(target_dt))
                if key in _recent:
                    continue  # –≤ —ç—Ç—É –º–∏–Ω—É—Ç—É —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏

                try:
                    await bot.send_message(
                        a.user_id,
                        f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {human} –¥–æ –≤–∏–∑–∏—Ç–∞:\n"
                        f"üíá {svc_name}\n"
                        f"üìÖ {when_str}"
                    )
                    # –ø–æ–º–µ—á–∞–µ–º, —á—Ç–æ–±—ã –Ω–µ —Å–ª–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ –≤ —Ç—É –∂–µ –º–∏–Ω—É—Ç—É
                    _recent[key] = (now.timestamp() + WINDOW_SEC)
                    logger.info("Reminder sent (%s) for appointment %s", label, a.id)
                except Exception as e:
                    logger.warning("Failed to notify user %s for appt %s: %r", a.user_id, a.id, e)


def setup_scheduler(bot):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –∑–∞–¥–∞—á—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.
    –ó–∞–ø—É—Å–∫ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É, —Ç–∞–π–º–∑–æ–Ω–∞ –±–µ—Ä—ë—Ç—Å—è –∏–∑ helpers.TZ.
    """
    sched = AsyncIOScheduler(timezone=str(TZ))
    # add_job —Å replace_existing=True ‚Äî –±–µ–∑–æ–ø–∞—Å–Ω–æ –ø—Ä–∏ —Ä–µ—Å—Ç–∞—Ä—Ç–∞—Ö.
    sched.add_job(
        _tick,
        trigger="interval",
        minutes=1,
        args=[bot],
        id="reminders",
        replace_existing=True,
        coalesce=True,   # –µ—Å–ª–∏ –±—ã–ª–∏ –ø—Ä–æ–ø—É—Å–∫–∏ –≤–æ –≤—Ä–µ–º—è —Å–Ω–∞ ‚Äî –≤—ã–ø–æ–ª–Ω–∏–º –æ–¥–∏–Ω —Ä–∞–∑
        max_instances=1  # –Ω–µ –ø—É—Å–∫–∞—Ç—å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ —Ç–∏–∫–∏
    )
    sched.start()
    logger.info("üìÜ Reminder scheduler started")
