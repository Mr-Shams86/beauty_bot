import datetime as dt
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from utils.helpers import TZ
from database import get_appointments
from loguru import logger

async def _tick(bot):
    now = dt.datetime.now(TZ)
    in_24h = now + dt.timedelta(hours=24)
    in_2h  = now + dt.timedelta(hours=2)

    # –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ get_appointments() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç ORM-–æ–±—ä–µ–∫—Ç—ã
    appts = await get_appointments()
    for a in appts:
        # –ø—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ ¬´—Ä–æ–≤–Ω–æ —á–µ—Ä–µ–∑ 24—á / 2—á¬ª, –æ–∫—Ä—É–≥–ª—è—è –¥–æ –º–∏–Ω—É—Ç—ã
        for target in (in_24h, in_2h):
            if abs((a.date - target).total_seconds()) < 60:
                try:
                    await bot.send_message(a.user_id, f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {a.service} ‚Äî {a.date.astimezone(TZ):%d.%m.%Y %H:%M}")
                except Exception as e:
                    logger.warning(f"Failed to notify {a.user_id}: {e}")

def setup_scheduler(bot):
    sched = AsyncIOScheduler(timezone=str(TZ))
    sched.add_job(_tick, "interval", minutes=1, args=[bot], id="reminders", replace_existing=True)
    sched.start()
